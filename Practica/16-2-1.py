# –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
# üìÆ –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID.
# S - –ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (Single Responsibility)
#     –û–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–æ–Ω—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.
#     –ü–æ–¥—Ö–æ–¥ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: –≤—ã–¥–µ–ª–∏—Ç–µ –∑–æ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã.
#
# O - –ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏ (Open/Closed)
#     –û–ø–∏—Å–∞–Ω–∏–µ: –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–∫–ª–∞—Å—Å—ã, –º–æ–¥—É–ª–∏, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç. –ø.) –¥–æ–ª–∂–Ω—ã
#     –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –Ω–æ –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.
#     –ü–æ–¥—Ö–æ–¥ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã.
#     –û–Ω–∏ –º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å—ã —Ç—Ä–µ–±—É—é—Ç—Å—è,
#     –∏ —É—Å–∏–ª–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª–∏–≤ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞.
#
#


# –ï—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–¥–∞–∂, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å–æ–º Order (–ó–∞–∫–∞–∑).
#
# –í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è:
# —Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ (items)
# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (quantities)
# —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (prices)
# —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (status)
# –í –∫–ª–∞—Å—Å–µ Order –µ—Å—Ç—å –º–µ—Ç–æ–¥—ã –¥–ª—è:
# –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑ (add_item)
# –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ (total_price)
# –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ (pay)

from abc import ABC, abstractmethod

class Order:

 def __init__(self):
  self.items = []
  self.quantities = []
  self.prices = []
  self.status = "open"

 def add_item(self, name, price, quantity=1):
  self.items.append(name)
  self.quantities.append(quantity)
  self.prices.append(price)

 def total_price(self):
  return sum(quantities * prices for quantities, prices in
             zip(self.quantities, self.prices))

 def __str__(self):
  return '\n'.join(f'{item}, —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {price} —Ä—É–±. –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantitie} —à—Ç.'
                   for item, quantitie, price in zip(self.items, self.quantities, self.prices))

 # def pay(self, payment_type, security_code):
 #  if payment_type.lower().strip() == "debit":
 #   print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–±–µ—Ç–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞")
 #   print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_code}")
 #   self.status = "paid"
 #  elif payment_type.lower().strip() == "credit":
 #   print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞")
 #   print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_code}")
 #   self.status = "paid"
 #  else:
 #   raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_type}")

class PaymentProcessor(ABC):

 @abstractmethod
 def pay(self, order, security_code):
  pass


class DebitPaymentProcessor(PaymentProcessor):
 def pay(self, order, security_code):
  print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–±–µ—Ç–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞")
  print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_code}")
  order.status = "paid"


class CreditPaymentProcessor(PaymentProcessor):
 def pay(self, order, security_code):
  print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞")
  print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_code}")
  order.status = "paid"


# –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
order = Order()
# –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
order.add_item("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞", 2500)
order.add_item("SSD", 7500)
order.add_item("USB-–∫–∞–±–µ–ª—å", 250, 2)
# –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
print(order)
print(f'–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ = {order.total_price()} —Ä—É–±.')
# –û–ø–ª–∞—á–∏–≤–∞–µ–º –∑–∞–∫–∞–∑
# try:
#  order.pay("debit", "0372846")
# except Exception as t_err:
#  print(t_err)
# try:
#   order.pay("debit_1", "0372846")
# except Exception as t_err:
#  print(t_err)

processor = PaymentProcessor()
processor.pay_debit(order, "0372846")
processor.pay_credit(order, "7383903")